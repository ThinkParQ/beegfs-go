// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: flex.proto

package flex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerNodeClient is the client API for WorkerNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerNodeClient interface {
	UpdateConfig(ctx context.Context, in *WorkerNodeConfigRequest, opts ...grpc.CallOption) (*WorkerNodeConfigResponse, error)
	SubmitWorkRequest(ctx context.Context, in *WorkRequest, opts ...grpc.CallOption) (*WorkResponse, error)
	// UpdateWorkRequest is used to change the state of existing work requests,
	// including cancelling them at a users request, or cancelling after an unclean
	// start where there are entries in the request journal we need to ensure don't
	// have outstanding work requests that we don't know about anymore.
	UpdateWorkRequest(ctx context.Context, in *UpdateWorkRequest, opts ...grpc.CallOption) (*WorkResponse, error)
	// Used to change the state of all WRs assigned to a particular node. This is
	// typically only used when initially connecting to a node, or if we want to
	// drain the WRs assigned to a node if it is being removed.
	UpdateWorkRequests(ctx context.Context, in *UpdateWorkRequests, opts ...grpc.CallOption) (*UpdateWorkRequestsResponse, error)
}

type workerNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerNodeClient(cc grpc.ClientConnInterface) WorkerNodeClient {
	return &workerNodeClient{cc}
}

func (c *workerNodeClient) UpdateConfig(ctx context.Context, in *WorkerNodeConfigRequest, opts ...grpc.CallOption) (*WorkerNodeConfigResponse, error) {
	out := new(WorkerNodeConfigResponse)
	err := c.cc.Invoke(ctx, "/flex.WorkerNode/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerNodeClient) SubmitWorkRequest(ctx context.Context, in *WorkRequest, opts ...grpc.CallOption) (*WorkResponse, error) {
	out := new(WorkResponse)
	err := c.cc.Invoke(ctx, "/flex.WorkerNode/SubmitWorkRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerNodeClient) UpdateWorkRequest(ctx context.Context, in *UpdateWorkRequest, opts ...grpc.CallOption) (*WorkResponse, error) {
	out := new(WorkResponse)
	err := c.cc.Invoke(ctx, "/flex.WorkerNode/UpdateWorkRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerNodeClient) UpdateWorkRequests(ctx context.Context, in *UpdateWorkRequests, opts ...grpc.CallOption) (*UpdateWorkRequestsResponse, error) {
	out := new(UpdateWorkRequestsResponse)
	err := c.cc.Invoke(ctx, "/flex.WorkerNode/UpdateWorkRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerNodeServer is the server API for WorkerNode service.
// All implementations must embed UnimplementedWorkerNodeServer
// for forward compatibility
type WorkerNodeServer interface {
	UpdateConfig(context.Context, *WorkerNodeConfigRequest) (*WorkerNodeConfigResponse, error)
	SubmitWorkRequest(context.Context, *WorkRequest) (*WorkResponse, error)
	// UpdateWorkRequest is used to change the state of existing work requests,
	// including cancelling them at a users request, or cancelling after an unclean
	// start where there are entries in the request journal we need to ensure don't
	// have outstanding work requests that we don't know about anymore.
	UpdateWorkRequest(context.Context, *UpdateWorkRequest) (*WorkResponse, error)
	// Used to change the state of all WRs assigned to a particular node. This is
	// typically only used when initially connecting to a node, or if we want to
	// drain the WRs assigned to a node if it is being removed.
	UpdateWorkRequests(context.Context, *UpdateWorkRequests) (*UpdateWorkRequestsResponse, error)
	mustEmbedUnimplementedWorkerNodeServer()
}

// UnimplementedWorkerNodeServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerNodeServer struct {
}

func (UnimplementedWorkerNodeServer) UpdateConfig(context.Context, *WorkerNodeConfigRequest) (*WorkerNodeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedWorkerNodeServer) SubmitWorkRequest(context.Context, *WorkRequest) (*WorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWorkRequest not implemented")
}
func (UnimplementedWorkerNodeServer) UpdateWorkRequest(context.Context, *UpdateWorkRequest) (*WorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkRequest not implemented")
}
func (UnimplementedWorkerNodeServer) UpdateWorkRequests(context.Context, *UpdateWorkRequests) (*UpdateWorkRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkRequests not implemented")
}
func (UnimplementedWorkerNodeServer) mustEmbedUnimplementedWorkerNodeServer() {}

// UnsafeWorkerNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerNodeServer will
// result in compilation errors.
type UnsafeWorkerNodeServer interface {
	mustEmbedUnimplementedWorkerNodeServer()
}

func RegisterWorkerNodeServer(s grpc.ServiceRegistrar, srv WorkerNodeServer) {
	s.RegisterService(&WorkerNode_ServiceDesc, srv)
}

func _WorkerNode_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerNodeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerNodeServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.WorkerNode/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerNodeServer).UpdateConfig(ctx, req.(*WorkerNodeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerNode_SubmitWorkRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerNodeServer).SubmitWorkRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.WorkerNode/SubmitWorkRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerNodeServer).SubmitWorkRequest(ctx, req.(*WorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerNode_UpdateWorkRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerNodeServer).UpdateWorkRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.WorkerNode/UpdateWorkRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerNodeServer).UpdateWorkRequest(ctx, req.(*UpdateWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerNode_UpdateWorkRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerNodeServer).UpdateWorkRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.WorkerNode/UpdateWorkRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerNodeServer).UpdateWorkRequests(ctx, req.(*UpdateWorkRequests))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerNode_ServiceDesc is the grpc.ServiceDesc for WorkerNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flex.WorkerNode",
	HandlerType: (*WorkerNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateConfig",
			Handler:    _WorkerNode_UpdateConfig_Handler,
		},
		{
			MethodName: "SubmitWorkRequest",
			Handler:    _WorkerNode_SubmitWorkRequest_Handler,
		},
		{
			MethodName: "UpdateWorkRequest",
			Handler:    _WorkerNode_UpdateWorkRequest_Handler,
		},
		{
			MethodName: "UpdateWorkRequests",
			Handler:    _WorkerNode_UpdateWorkRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flex.proto",
}
