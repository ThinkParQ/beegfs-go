// Package Flex contains common messages used across multiple Flex services.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.3
// source: flex.proto

package flex

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewState int32

const (
	NewState_UNKNOWN   NewState = 0
	NewState_CANCEL    NewState = 1
	NewState_DELETE    NewState = 2
	NewState_UNCHANGED NewState = 3
)

// Enum value maps for NewState.
var (
	NewState_name = map[int32]string{
		0: "UNKNOWN",
		1: "CANCEL",
		2: "DELETE",
		3: "UNCHANGED",
	}
	NewState_value = map[string]int32{
		"UNKNOWN":   0,
		"CANCEL":    1,
		"DELETE":    2,
		"UNCHANGED": 3,
	}
)

func (x NewState) Enum() *NewState {
	p := new(NewState)
	*p = x
	return p
}

func (x NewState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NewState) Descriptor() protoreflect.EnumDescriptor {
	return file_flex_proto_enumTypes[0].Descriptor()
}

func (NewState) Type() protoreflect.EnumType {
	return &file_flex_proto_enumTypes[0]
}

func (x NewState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NewState.Descriptor instead.
func (NewState) EnumDescriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{0}
}

// The Status fields are used to track the progress of each JobRequest to a terminal state.
// See the docs/design/architecture/v1/job-request-state-flow.drawio diagram for more details.
type RequestStatus_State int32

const (
	// Used when the state of a job cannot be definitively determined.
	// For example if BeeRemote cannot contact a worker node.
	RequestStatus_UNKNOWN RequestStatus_State = 0
	// Initial state for all jobs. This indicates BeeRemote has not had a
	// chance to schedule a job to any worker node(s).
	RequestStatus_UNASSIGNED RequestStatus_State = 1
	// An ephemeral error has occurred running the job. For example a
	// network issue. Jobs and work requests in this state will be
	// automatically retried until manually cancelled or a fatal error
	// ocurred causing the job to become FAILED.
	RequestStatus_ERROR RequestStatus_State = 2
	// ASSIGNED = 2;    // When BeeRemote first assigns a job to a worker node. In this state we don't know if the worker node actually received the request until it is acknowledged (in the SCHEDULED state).
	// CREATED = 3;     // When either BeeRemote or a worker has created a multipart upload/other prerequisites of a specific job type.
	// RESCHEDULED = 4; // If a worker node is waiting on BeeRemote to determine if the job should be distributed across multiple workers.
	// When a worker node has accepted a job but is waiting on CPU cycles to actually run it.
	RequestStatus_SCHEDULED RequestStatus_State = 5
	// If a job is actively in progress on a worker.
	RequestStatus_RUNNING RequestStatus_State = 6
	// If a worker node comes up with outstanding jobs, it will first check with BeeRemote to ensure the job wasn't cancelled. If something queries the state of a job before BeeRemote responds the job will be considered STALLED.
	// TODO: Implement
	RequestStatus_STALLED RequestStatus_State = 7
	// If a job has been manually paused.
	// TODO: Implement.
	RequestStatus_PAUSED RequestStatus_State = 8
	// If a worker node encounters an error processing a work request, then WorkerMgr will attempt to cancel all work requests for the job.
	// If this happens successfully the work request and overall job state will be set to cancelled with the WR message including the original error.
	// If any of the requests could not be cancelled then the job will be considered failed and the WR message will include the original error and reason the cancellation failed.
	// With a failed job additional job requests will be rejected for the path/RST combo until the failure is manually cleared by successfully cancelling the job.
	// This ensures there are no resource leaks, conflicts or inconsistencies caused by an orphaned WR that is still active.
	RequestStatus_FAILED RequestStatus_State = 9
	// If the job has finished succesfully.
	// This is a terminal state and no further state changes are possible once a job enters this state.
	RequestStatus_COMPLETED RequestStatus_State = 10
	// Jobs and their WRs may be cancelled manually be a user, or automatically due to a failure.
	// This is a terminal state and no further state changes are possible once a job enters this state.
	RequestStatus_CANCELLED RequestStatus_State = 11
)

// Enum value maps for RequestStatus_State.
var (
	RequestStatus_State_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "UNASSIGNED",
		2:  "ERROR",
		5:  "SCHEDULED",
		6:  "RUNNING",
		7:  "STALLED",
		8:  "PAUSED",
		9:  "FAILED",
		10: "COMPLETED",
		11: "CANCELLED",
	}
	RequestStatus_State_value = map[string]int32{
		"UNKNOWN":    0,
		"UNASSIGNED": 1,
		"ERROR":      2,
		"SCHEDULED":  5,
		"RUNNING":    6,
		"STALLED":    7,
		"PAUSED":     8,
		"FAILED":     9,
		"COMPLETED":  10,
		"CANCELLED":  11,
	}
)

func (x RequestStatus_State) Enum() *RequestStatus_State {
	p := new(RequestStatus_State)
	*p = x
	return p
}

func (x RequestStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_flex_proto_enumTypes[1].Descriptor()
}

func (RequestStatus_State) Type() protoreflect.EnumType {
	return &file_flex_proto_enumTypes[1]
}

func (x RequestStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestStatus_State.Descriptor instead.
func (RequestStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{4, 0}
}

type SyncJob_Operation int32

const (
	SyncJob_UNKNOWN  SyncJob_Operation = 0
	SyncJob_UPLOAD   SyncJob_Operation = 1
	SyncJob_DOWNLOAD SyncJob_Operation = 2
)

// Enum value maps for SyncJob_Operation.
var (
	SyncJob_Operation_name = map[int32]string{
		0: "UNKNOWN",
		1: "UPLOAD",
		2: "DOWNLOAD",
	}
	SyncJob_Operation_value = map[string]int32{
		"UNKNOWN":  0,
		"UPLOAD":   1,
		"DOWNLOAD": 2,
	}
)

func (x SyncJob_Operation) Enum() *SyncJob_Operation {
	p := new(SyncJob_Operation)
	*p = x
	return p
}

func (x SyncJob_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJob_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_flex_proto_enumTypes[2].Descriptor()
}

func (SyncJob_Operation) Type() protoreflect.EnumType {
	return &file_flex_proto_enumTypes[2]
}

func (x SyncJob_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJob_Operation.Descriptor instead.
func (SyncJob_Operation) EnumDescriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{6, 0}
}

type WorkerNodeConfigResponse_Result int32

const (
	WorkerNodeConfigResponse_UNKNOWN WorkerNodeConfigResponse_Result = 0 // Should not be used. Exists only as the default if there is a programming error.
	WorkerNodeConfigResponse_SUCCESS WorkerNodeConfigResponse_Result = 1 // The configuration was succesfully updated.
	WorkerNodeConfigResponse_PARTIAL WorkerNodeConfigResponse_Result = 2 // The configuration was partially updated (see the message for details).
	WorkerNodeConfigResponse_FAILURE WorkerNodeConfigResponse_Result = 3 // The configuration was not updated.
)

// Enum value maps for WorkerNodeConfigResponse_Result.
var (
	WorkerNodeConfigResponse_Result_name = map[int32]string{
		0: "UNKNOWN",
		1: "SUCCESS",
		2: "PARTIAL",
		3: "FAILURE",
	}
	WorkerNodeConfigResponse_Result_value = map[string]int32{
		"UNKNOWN": 0,
		"SUCCESS": 1,
		"PARTIAL": 2,
		"FAILURE": 3,
	}
)

func (x WorkerNodeConfigResponse_Result) Enum() *WorkerNodeConfigResponse_Result {
	p := new(WorkerNodeConfigResponse_Result)
	*p = x
	return p
}

func (x WorkerNodeConfigResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkerNodeConfigResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_flex_proto_enumTypes[3].Descriptor()
}

func (WorkerNodeConfigResponse_Result) Type() protoreflect.EnumType {
	return &file_flex_proto_enumTypes[3]
}

func (x WorkerNodeConfigResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkerNodeConfigResponse_Result.Descriptor instead.
func (WorkerNodeConfigResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{9, 0}
}

// Generic response that can be used anywhere a more meaningful response is not
// needed.
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{0}
}

func (x *Response) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Used to change the state of a single work request.
// The server will respond with a RequestStatus.
type UpdateWorkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId     string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	RequestId string   `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	NewState  NewState `protobuf:"varint,3,opt,name=new_state,json=newState,proto3,enum=flex.NewState" json:"new_state,omitempty"`
}

func (x *UpdateWorkRequest) Reset() {
	*x = UpdateWorkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkRequest) ProtoMessage() {}

func (x *UpdateWorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkRequest) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateWorkRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *UpdateWorkRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *UpdateWorkRequest) GetNewState() NewState {
	if x != nil {
		return x.NewState
	}
	return NewState_UNKNOWN
}

// Used to change the state of all WRs assigned to a particular node. This is
// typically only used when initially connecting to a node, or if we want to
// drain the WRs assigned to a node if it is being removed. The server will
// respond with a UpdateWorkRequestsResponse.
type UpdateWorkRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewState NewState `protobuf:"varint,2,opt,name=new_state,json=newState,proto3,enum=flex.NewState" json:"new_state,omitempty"`
}

func (x *UpdateWorkRequests) Reset() {
	*x = UpdateWorkRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkRequests) ProtoMessage() {}

func (x *UpdateWorkRequests) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkRequests.ProtoReflect.Descriptor instead.
func (*UpdateWorkRequests) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateWorkRequests) GetNewState() NewState {
	if x != nil {
		return x.NewState
	}
	return NewState_UNKNOWN
}

// There may be 1000s of WRs assigned to the node so we don't return individual
// responses to UpdateWorkRequests. Instead the request prompts the node to
// start processing WRs based on the requested newState, and the result to each
// WR will be sent back using the normal mechanism.
type UpdateWorkRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateWorkRequestsResponse) Reset() {
	*x = UpdateWorkRequestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkRequestsResponse) ProtoMessage() {}

func (x *UpdateWorkRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkRequestsResponse.ProtoReflect.Descriptor instead.
func (*UpdateWorkRequestsResponse) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateWorkRequestsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateWorkRequestsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Status codes used by BeeRemote and its worker nodes to track the progress of
// a Job and its work requests. We use a common set of statuses across all types
// of Jobs and worker nodes (such as BeeSync).
type RequestStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State RequestStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=flex.RequestStatus_State" json:"state,omitempty"`
	// Message should be used to return any additional details, particuarly to aid in troubleshooting.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RequestStatus) Reset() {
	*x = RequestStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestStatus) ProtoMessage() {}

func (x *RequestStatus) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestStatus.ProtoReflect.Descriptor instead.
func (*RequestStatus) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{4}
}

func (x *RequestStatus) GetState() RequestStatus_State {
	if x != nil {
		return x.State
	}
	return RequestStatus_UNKNOWN
}

func (x *RequestStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// BeeRemote distributes jobs to worker nodes as work requests.
type WorkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId     string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Used as the upload ID for multipart uploads, or any other time
	// an external identifer is needed to coordinate a distributed transfer.
	ExternalId          string               `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Path                string               `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Status              *RequestStatus       `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Segment             *WorkRequest_Segment `protobuf:"bytes,6,opt,name=segment,proto3" json:"segment,omitempty"`
	RemoteStorageTarget string               `protobuf:"bytes,7,opt,name=remote_storage_target,json=remoteStorageTarget,proto3" json:"remote_storage_target,omitempty"`
	// Types that are assignable to Type:
	//
	//	*WorkRequest_Mock
	//	*WorkRequest_Sync
	Type isWorkRequest_Type `protobuf_oneof:"Type"`
}

func (x *WorkRequest) Reset() {
	*x = WorkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkRequest) ProtoMessage() {}

func (x *WorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkRequest.ProtoReflect.Descriptor instead.
func (*WorkRequest) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{5}
}

func (x *WorkRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *WorkRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *WorkRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *WorkRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WorkRequest) GetStatus() *RequestStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WorkRequest) GetSegment() *WorkRequest_Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

func (x *WorkRequest) GetRemoteStorageTarget() string {
	if x != nil {
		return x.RemoteStorageTarget
	}
	return ""
}

func (m *WorkRequest) GetType() isWorkRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *WorkRequest) GetMock() string {
	if x, ok := x.GetType().(*WorkRequest_Mock); ok {
		return x.Mock
	}
	return ""
}

func (x *WorkRequest) GetSync() *SyncJob {
	if x, ok := x.GetType().(*WorkRequest_Sync); ok {
		return x.Sync
	}
	return nil
}

type isWorkRequest_Type interface {
	isWorkRequest_Type()
}

type WorkRequest_Mock struct {
	Mock string `protobuf:"bytes,10,opt,name=mock,proto3,oneof"`
}

type WorkRequest_Sync struct {
	Sync *SyncJob `protobuf:"bytes,11,opt,name=sync,proto3,oneof"`
}

func (*WorkRequest_Mock) isWorkRequest_Type() {}

func (*WorkRequest_Sync) isWorkRequest_Type() {}

// A SyncJob is WHAT work needs to be done. It is populated based on the
// file system modification event or by a user describing some work that needs
// to be done. It does not carry any details about HOW the request will be
// fufilled (that is part of the generated SyncRequest).
type SyncJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation SyncJob_Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=flex.SyncJob_Operation" json:"operation,omitempty"`
}

func (x *SyncJob) Reset() {
	*x = SyncJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncJob) ProtoMessage() {}

func (x *SyncJob) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncJob.ProtoReflect.Descriptor instead.
func (*SyncJob) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{6}
}

func (x *SyncJob) GetOperation() SyncJob_Operation {
	if x != nil {
		return x.Operation
	}
	return SyncJob_UNKNOWN
}

// Currently while requests types are specific to a particular worker node type,
// we use the same response type for all nodes. This is what allow us to return
// work results to BeeRemote using a generic unary RPC, instead of having to
// establish a long-lived streaming RPC with each worker node to return work
// results of a specific type.
type WorkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId     string         `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	RequestId string         `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Status    *RequestStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"` // TODO: Do we need a different list of statuses for WorkResponses?
	// Each work request is split into one or more parts so data can be
	// transferred in parallel on each assigned node.
	Parts []*WorkResponse_Part `protobuf:"bytes,4,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *WorkResponse) Reset() {
	*x = WorkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkResponse) ProtoMessage() {}

func (x *WorkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkResponse.ProtoReflect.Descriptor instead.
func (*WorkResponse) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{7}
}

func (x *WorkResponse) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *WorkResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *WorkResponse) GetStatus() *RequestStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WorkResponse) GetParts() []*WorkResponse_Part {
	if x != nil {
		return x.Parts
	}
	return nil
}

// We use a common configuration update request/response types for all worker
// node types.
type WorkerNodeConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// While worker nodes could infer BeeRemote network details, it is better we
	// explicitly tell them where to send work results. Especially if we want to
	// send and receive work requests on different interfaces or ports.
	BeeRemote *BeeRemoteNode `protobuf:"bytes,1,opt,name=beeRemote,proto3" json:"beeRemote,omitempty"`
	// All RemoteStorageTarget(s) that should be configured need to be included in
	// each message. Any that are not included will be deleted.
	Rsts []*RemoteStorageTarget `protobuf:"bytes,2,rep,name=rsts,proto3" json:"rsts,omitempty"`
}

func (x *WorkerNodeConfigRequest) Reset() {
	*x = WorkerNodeConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerNodeConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeConfigRequest) ProtoMessage() {}

func (x *WorkerNodeConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeConfigRequest.ProtoReflect.Descriptor instead.
func (*WorkerNodeConfigRequest) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{8}
}

func (x *WorkerNodeConfigRequest) GetBeeRemote() *BeeRemoteNode {
	if x != nil {
		return x.BeeRemote
	}
	return nil
}

func (x *WorkerNodeConfigRequest) GetRsts() []*RemoteStorageTarget {
	if x != nil {
		return x.Rsts
	}
	return nil
}

type WorkerNodeConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result WorkerNodeConfigResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flex.WorkerNodeConfigResponse_Result" json:"result,omitempty"`
	// Message should be used to return any additional details, particuarly to aid in troubleshooting.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *WorkerNodeConfigResponse) Reset() {
	*x = WorkerNodeConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerNodeConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeConfigResponse) ProtoMessage() {}

func (x *WorkerNodeConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeConfigResponse.ProtoReflect.Descriptor instead.
func (*WorkerNodeConfigResponse) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{9}
}

func (x *WorkerNodeConfigResponse) GetResult() WorkerNodeConfigResponse_Result {
	if x != nil {
		return x.Result
	}
	return WorkerNodeConfigResponse_UNKNOWN
}

func (x *WorkerNodeConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BeeRemoteNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port     int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *BeeRemoteNode) Reset() {
	*x = BeeRemoteNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeeRemoteNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeeRemoteNode) ProtoMessage() {}

func (x *BeeRemoteNode) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeeRemoteNode.ProtoReflect.Descriptor instead.
func (*BeeRemoteNode) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{10}
}

func (x *BeeRemoteNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BeeRemoteNode) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *BeeRemoteNode) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Remote Storage Targets (RSTs) describe where data should be stored or
// retrieved from. Different BeeRemote worker nodes like BeeSync nodes should
// support one or more RST types. This is not currently enforced anywhere by the
// protobuf defined structs. When submitting job requests it is the callers
// responsibility to ensure the reference RST and job type are compatible.
// Otherwise BeeRemote will reject the job.
//
// Note while there is a lot of data contained in RemoteStorageTarget, gRPC will
// not serialize fields to the wire unless they are set.
// https://protobuf.dev/programming-guides/proto3/#specifying-field-rules This
// allows us to define all possible fields that may need to be sent to BeeSync
// to configure different target types, without extra overhead.
type RemoteStorageTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Policies *RemoteStorageTarget_Policies `protobuf:"bytes,3,opt,name=policies,proto3" json:"policies,omitempty"`
	// Type defines fields required to figure out "where" to transfer content.
	// IMPORTANT: When adding a new RST type before it can be configured by
	// BeeRemote/other it must also be added to the rst.SupportedRSTTypes map in
	// so it can be used with config.SetRSTTypeHook() to allow its configuration
	// to be unmarshalled into the Go structs generated by protoc. See the notes
	// in the rst package for additional details.
	//
	// Types that are assignable to Type:
	//
	//	*RemoteStorageTarget_S3_
	//	*RemoteStorageTarget_Posix
	//	*RemoteStorageTarget_Azure_
	//	*RemoteStorageTarget_Mock
	Type isRemoteStorageTarget_Type `protobuf_oneof:"type"`
}

func (x *RemoteStorageTarget) Reset() {
	*x = RemoteStorageTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget) ProtoMessage() {}

func (x *RemoteStorageTarget) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{11}
}

func (x *RemoteStorageTarget) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RemoteStorageTarget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoteStorageTarget) GetPolicies() *RemoteStorageTarget_Policies {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (m *RemoteStorageTarget) GetType() isRemoteStorageTarget_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RemoteStorageTarget) GetS3() *RemoteStorageTarget_S3 {
	if x, ok := x.GetType().(*RemoteStorageTarget_S3_); ok {
		return x.S3
	}
	return nil
}

func (x *RemoteStorageTarget) GetPosix() *RemoteStorageTarget_POSIX {
	if x, ok := x.GetType().(*RemoteStorageTarget_Posix); ok {
		return x.Posix
	}
	return nil
}

func (x *RemoteStorageTarget) GetAzure() *RemoteStorageTarget_Azure {
	if x, ok := x.GetType().(*RemoteStorageTarget_Azure_); ok {
		return x.Azure
	}
	return nil
}

func (x *RemoteStorageTarget) GetMock() string {
	if x, ok := x.GetType().(*RemoteStorageTarget_Mock); ok {
		return x.Mock
	}
	return ""
}

type isRemoteStorageTarget_Type interface {
	isRemoteStorageTarget_Type()
}

type RemoteStorageTarget_S3_ struct {
	S3 *RemoteStorageTarget_S3 `protobuf:"bytes,4,opt,name=s3,proto3,oneof"`
}

type RemoteStorageTarget_Posix struct {
	Posix *RemoteStorageTarget_POSIX `protobuf:"bytes,5,opt,name=posix,proto3,oneof"`
}

type RemoteStorageTarget_Azure_ struct {
	Azure *RemoteStorageTarget_Azure `protobuf:"bytes,6,opt,name=azure,proto3,oneof"`
}

type RemoteStorageTarget_Mock struct {
	Mock string `protobuf:"bytes,7,opt,name=mock,proto3,oneof"`
}

func (*RemoteStorageTarget_S3_) isRemoteStorageTarget_Type() {}

func (*RemoteStorageTarget_Posix) isRemoteStorageTarget_Type() {}

func (*RemoteStorageTarget_Azure_) isRemoteStorageTarget_Type() {}

func (*RemoteStorageTarget_Mock) isRemoteStorageTarget_Type() {}

// A segment indicates what portion of the file a particular worker node should
// work on. Segments can be divided into one or more parts, which can be used to
// execute the requested operation in parallel if supported by the RST type.
type WorkRequest_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffsetStart int64 `protobuf:"varint,1,opt,name=offset_start,json=offsetStart,proto3" json:"offset_start,omitempty"`
	// Inclusive of the last offset.
	OffsetStop int64 `protobuf:"varint,2,opt,name=offset_stop,json=offsetStop,proto3" json:"offset_stop,omitempty"`
	// The amount of data in each part is calculated based on the offset start/stop.
	PartsStart int32 `protobuf:"varint,3,opt,name=parts_start,json=partsStart,proto3" json:"parts_start,omitempty"`
	// Inclusive of the last part.
	PartsStop int32 `protobuf:"varint,4,opt,name=parts_stop,json=partsStop,proto3" json:"parts_stop,omitempty"`
}

func (x *WorkRequest_Segment) Reset() {
	*x = WorkRequest_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkRequest_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkRequest_Segment) ProtoMessage() {}

func (x *WorkRequest_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkRequest_Segment.ProtoReflect.Descriptor instead.
func (*WorkRequest_Segment) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{5, 0}
}

func (x *WorkRequest_Segment) GetOffsetStart() int64 {
	if x != nil {
		return x.OffsetStart
	}
	return 0
}

func (x *WorkRequest_Segment) GetOffsetStop() int64 {
	if x != nil {
		return x.OffsetStop
	}
	return 0
}

func (x *WorkRequest_Segment) GetPartsStart() int32 {
	if x != nil {
		return x.PartsStart
	}
	return 0
}

func (x *WorkRequest_Segment) GetPartsStop() int32 {
	if x != nil {
		return x.PartsStop
	}
	return 0
}

// A part is not the same as a segment. A segment is some part of a a larger
// operation assigned to a particular worker node, and each segment is
// divided into one or more parts allowing operations to be executed in
// parallel on a worker node. We use a standard part definition for all RST
// types. The use of the fields in Part will vary depending on the type.
type WorkResponse_Part struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartNumber  int32  `protobuf:"varint,1,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	Completed   bool   `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
	EntityTag   string `protobuf:"bytes,3,opt,name=entity_tag,json=entityTag,proto3" json:"entity_tag,omitempty"`
	Checksum    string `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
	OffsetStart int64  `protobuf:"varint,5,opt,name=offsetStart,proto3" json:"offsetStart,omitempty"`
	OffsetStop  int64  `protobuf:"varint,6,opt,name=offsetStop,proto3" json:"offsetStop,omitempty"`
}

func (x *WorkResponse_Part) Reset() {
	*x = WorkResponse_Part{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkResponse_Part) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkResponse_Part) ProtoMessage() {}

func (x *WorkResponse_Part) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkResponse_Part.ProtoReflect.Descriptor instead.
func (*WorkResponse_Part) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{7, 0}
}

func (x *WorkResponse_Part) GetPartNumber() int32 {
	if x != nil {
		return x.PartNumber
	}
	return 0
}

func (x *WorkResponse_Part) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *WorkResponse_Part) GetEntityTag() string {
	if x != nil {
		return x.EntityTag
	}
	return ""
}

func (x *WorkResponse_Part) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *WorkResponse_Part) GetOffsetStart() int64 {
	if x != nil {
		return x.OffsetStart
	}
	return 0
}

func (x *WorkResponse_Part) GetOffsetStop() int64 {
	if x != nil {
		return x.OffsetStop
	}
	return 0
}

// TODO: consider if defining policies would be more flexible as a map.
// These could change a lot early on, and defining them here creates a contract
// we won't ever remove/change them.
type RemoteStorageTarget_Policies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalFlock       bool `protobuf:"varint,1,opt,name=local_flock,json=localFlock,proto3" json:"local_flock,omitempty"`
	RemoteFlock      bool `protobuf:"varint,2,opt,name=remote_flock,json=remoteFlock,proto3" json:"remote_flock,omitempty"`
	KeepDirStructure bool `protobuf:"varint,3,opt,name=keep_dir_structure,json=keepDirStructure,proto3" json:"keep_dir_structure,omitempty"`
	// If BeeGFS metadata should be stored as extended attributes/metadata (if supported).
	KeepBeegfsMetadata bool `protobuf:"varint,4,opt,name=keep_beegfs_metadata,json=keepBeegfsMetadata,proto3" json:"keep_beegfs_metadata,omitempty"`
	// If the file size is larger than this, BeeRemote handles creating/finishing the multipart upload (if applicable) and will assign the job to multiple worker nodes.
	// If the file size is smaller than this, BeeRemote immediately assigns the job to a single worker node that handles creating/finishing the multipart upload (if needed).
	FastStartMaxSize int64 `protobuf:"varint,5,opt,name=fast_start_max_size,json=fastStartMaxSize,proto3" json:"fast_start_max_size,omitempty"`
}

func (x *RemoteStorageTarget_Policies) Reset() {
	*x = RemoteStorageTarget_Policies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget_Policies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_Policies) ProtoMessage() {}

func (x *RemoteStorageTarget_Policies) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget_Policies.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget_Policies) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{11, 0}
}

func (x *RemoteStorageTarget_Policies) GetLocalFlock() bool {
	if x != nil {
		return x.LocalFlock
	}
	return false
}

func (x *RemoteStorageTarget_Policies) GetRemoteFlock() bool {
	if x != nil {
		return x.RemoteFlock
	}
	return false
}

func (x *RemoteStorageTarget_Policies) GetKeepDirStructure() bool {
	if x != nil {
		return x.KeepDirStructure
	}
	return false
}

func (x *RemoteStorageTarget_Policies) GetKeepBeegfsMetadata() bool {
	if x != nil {
		return x.KeepBeegfsMetadata
	}
	return false
}

func (x *RemoteStorageTarget_Policies) GetFastStartMaxSize() int64 {
	if x != nil {
		return x.FastStartMaxSize
	}
	return 0
}

// The S3 type uses the AWS S3 SDK under the hood. To support non-AWS S3
// services we implement the EndPointResolverWithOptions interface to
// provide custom endpoint resolving behavior. By specifying the
// endpoint_url and optionally the parition_id and region we can support
// local S3 services like MinIO and theoretically other cloud providers like
// Azure or GCP.
type RemoteStorageTarget_S3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Endpoints should be formatted like: https://<ip-or-hostname>:<port>.
	// Ex: https://localhost:9000.
	// Because we are overriding the default AWS S3 SDK behavior an endpoint
	// must always be specified, even when using AWS.
	EndpointUrl string `protobuf:"bytes,1,opt,name=endpoint_url,json=endpointUrl,proto3" json:"endpoint_url,omitempty"`
	// AWS infrastructure is divided into partitions, with each partition
	// as a grouping of regions. Partition ID may not make sense for all
	// S3 services, and can sometimes be omitted (for example with MinIO).
	// https://docs.aws.amazon.com/sdk-for-go/api/aws/endpoints/#pkg-constants
	PartitionId string `protobuf:"bytes,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Region can sometimes be omitted (for example with MinIO).
	Region    string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Bucket    string `protobuf:"bytes,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
	AccessKey string `protobuf:"bytes,5,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey string `protobuf:"bytes,6,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (x *RemoteStorageTarget_S3) Reset() {
	*x = RemoteStorageTarget_S3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget_S3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_S3) ProtoMessage() {}

func (x *RemoteStorageTarget_S3) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget_S3.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget_S3) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{11, 1}
}

func (x *RemoteStorageTarget_S3) GetEndpointUrl() string {
	if x != nil {
		return x.EndpointUrl
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type RemoteStorageTarget_Azure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S3      *RemoteStorageTarget_S3 `protobuf:"bytes,1,opt,name=s3,proto3" json:"s3,omitempty"`
	Account string                  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *RemoteStorageTarget_Azure) Reset() {
	*x = RemoteStorageTarget_Azure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget_Azure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_Azure) ProtoMessage() {}

func (x *RemoteStorageTarget_Azure) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget_Azure.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget_Azure) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{11, 2}
}

func (x *RemoteStorageTarget_Azure) GetS3() *RemoteStorageTarget_S3 {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *RemoteStorageTarget_Azure) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type RemoteStorageTarget_POSIX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RemoteStorageTarget_POSIX) Reset() {
	*x = RemoteStorageTarget_POSIX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget_POSIX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_POSIX) ProtoMessage() {}

func (x *RemoteStorageTarget_POSIX) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget_POSIX.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget_POSIX) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{11, 3}
}

func (x *RemoteStorageTarget_POSIX) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_flex_proto protoreflect.FileDescriptor

var file_flex_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x66, 0x6c,
	0x65, 0x78, 0x22, 0x3e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x76, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x41, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x50, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xeb, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8e, 0x01, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54,
	0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x22, 0xe1, 0x03,
	0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6d, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f,
	0x62, 0x48, 0x00, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x1a, 0x8d, 0x01, 0x0a, 0x07, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x74, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x12, 0x35, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x57,
	0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02, 0x22, 0xe5, 0x02, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x65,
	0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x1a, 0xc2, 0x01, 0x0a, 0x04, 0x50,
	0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x61,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x22,
	0x7b, 0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x62, 0x65,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x66, 0x6c, 0x65, 0x78, 0x2e, 0x42, 0x65, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x62, 0x65, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x72, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c,
	0x65, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x04, 0x72, 0x73, 0x74, 0x73, 0x22, 0xb1, 0x01, 0x0a,
	0x18, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x66, 0x6c, 0x65, 0x78,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x3c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03,
	0x22, 0x4f, 0x0a, 0x0d, 0x42, 0x65, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0xc2, 0x06, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x02, 0x73, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x65, 0x78,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x33, 0x48, 0x00, 0x52, 0x02, 0x73, 0x33, 0x12, 0x37, 0x0a,
	0x05, 0x70, 0x6f, 0x73, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66,
	0x6c, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x50, 0x4f, 0x53, 0x49, 0x58, 0x48, 0x00, 0x52,
	0x05, 0x70, 0x6f, 0x73, 0x69, 0x78, 0x12, 0x37, 0x0a, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x1a, 0xdd, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x46, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x64,
	0x69, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x44, 0x69, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x62, 0x65, 0x65,
	0x67, 0x66, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x42, 0x65, 0x65, 0x67, 0x66, 0x73, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61,
	0x78, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0xb8, 0x01, 0x0a, 0x02, 0x53, 0x33, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x1a, 0x4f, 0x0a, 0x05, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x73, 0x33, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x2e, 0x53, 0x33, 0x52, 0x02, 0x73, 0x33, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x1b, 0x0a, 0x05, 0x50, 0x4f, 0x53, 0x49, 0x58, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x3e, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x44, 0x10, 0x03, 0x32, 0xab, 0x02, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x66, 0x6c, 0x65, 0x78,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x66,
	0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x1a, 0x20, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x70, 0x61, 0x72, 0x71, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x65, 0x78, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flex_proto_rawDescOnce sync.Once
	file_flex_proto_rawDescData = file_flex_proto_rawDesc
)

func file_flex_proto_rawDescGZIP() []byte {
	file_flex_proto_rawDescOnce.Do(func() {
		file_flex_proto_rawDescData = protoimpl.X.CompressGZIP(file_flex_proto_rawDescData)
	})
	return file_flex_proto_rawDescData
}

var file_flex_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_flex_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_flex_proto_goTypes = []interface{}{
	(NewState)(0),                        // 0: flex.NewState
	(RequestStatus_State)(0),             // 1: flex.RequestStatus.State
	(SyncJob_Operation)(0),               // 2: flex.SyncJob.Operation
	(WorkerNodeConfigResponse_Result)(0), // 3: flex.WorkerNodeConfigResponse.Result
	(*Response)(nil),                     // 4: flex.Response
	(*UpdateWorkRequest)(nil),            // 5: flex.UpdateWorkRequest
	(*UpdateWorkRequests)(nil),           // 6: flex.UpdateWorkRequests
	(*UpdateWorkRequestsResponse)(nil),   // 7: flex.UpdateWorkRequestsResponse
	(*RequestStatus)(nil),                // 8: flex.RequestStatus
	(*WorkRequest)(nil),                  // 9: flex.WorkRequest
	(*SyncJob)(nil),                      // 10: flex.SyncJob
	(*WorkResponse)(nil),                 // 11: flex.WorkResponse
	(*WorkerNodeConfigRequest)(nil),      // 12: flex.WorkerNodeConfigRequest
	(*WorkerNodeConfigResponse)(nil),     // 13: flex.WorkerNodeConfigResponse
	(*BeeRemoteNode)(nil),                // 14: flex.BeeRemoteNode
	(*RemoteStorageTarget)(nil),          // 15: flex.RemoteStorageTarget
	(*WorkRequest_Segment)(nil),          // 16: flex.WorkRequest.Segment
	(*WorkResponse_Part)(nil),            // 17: flex.WorkResponse.Part
	(*RemoteStorageTarget_Policies)(nil), // 18: flex.RemoteStorageTarget.Policies
	(*RemoteStorageTarget_S3)(nil),       // 19: flex.RemoteStorageTarget.S3
	(*RemoteStorageTarget_Azure)(nil),    // 20: flex.RemoteStorageTarget.Azure
	(*RemoteStorageTarget_POSIX)(nil),    // 21: flex.RemoteStorageTarget.POSIX
}
var file_flex_proto_depIdxs = []int32{
	0,  // 0: flex.UpdateWorkRequest.new_state:type_name -> flex.NewState
	0,  // 1: flex.UpdateWorkRequests.new_state:type_name -> flex.NewState
	1,  // 2: flex.RequestStatus.state:type_name -> flex.RequestStatus.State
	8,  // 3: flex.WorkRequest.status:type_name -> flex.RequestStatus
	16, // 4: flex.WorkRequest.segment:type_name -> flex.WorkRequest.Segment
	10, // 5: flex.WorkRequest.sync:type_name -> flex.SyncJob
	2,  // 6: flex.SyncJob.operation:type_name -> flex.SyncJob.Operation
	8,  // 7: flex.WorkResponse.status:type_name -> flex.RequestStatus
	17, // 8: flex.WorkResponse.parts:type_name -> flex.WorkResponse.Part
	14, // 9: flex.WorkerNodeConfigRequest.beeRemote:type_name -> flex.BeeRemoteNode
	15, // 10: flex.WorkerNodeConfigRequest.rsts:type_name -> flex.RemoteStorageTarget
	3,  // 11: flex.WorkerNodeConfigResponse.result:type_name -> flex.WorkerNodeConfigResponse.Result
	18, // 12: flex.RemoteStorageTarget.policies:type_name -> flex.RemoteStorageTarget.Policies
	19, // 13: flex.RemoteStorageTarget.s3:type_name -> flex.RemoteStorageTarget.S3
	21, // 14: flex.RemoteStorageTarget.posix:type_name -> flex.RemoteStorageTarget.POSIX
	20, // 15: flex.RemoteStorageTarget.azure:type_name -> flex.RemoteStorageTarget.Azure
	19, // 16: flex.RemoteStorageTarget.Azure.s3:type_name -> flex.RemoteStorageTarget.S3
	12, // 17: flex.WorkerNode.UpdateConfig:input_type -> flex.WorkerNodeConfigRequest
	9,  // 18: flex.WorkerNode.SubmitWorkRequest:input_type -> flex.WorkRequest
	5,  // 19: flex.WorkerNode.UpdateWorkRequest:input_type -> flex.UpdateWorkRequest
	6,  // 20: flex.WorkerNode.UpdateWorkRequests:input_type -> flex.UpdateWorkRequests
	13, // 21: flex.WorkerNode.UpdateConfig:output_type -> flex.WorkerNodeConfigResponse
	11, // 22: flex.WorkerNode.SubmitWorkRequest:output_type -> flex.WorkResponse
	11, // 23: flex.WorkerNode.UpdateWorkRequest:output_type -> flex.WorkResponse
	7,  // 24: flex.WorkerNode.UpdateWorkRequests:output_type -> flex.UpdateWorkRequestsResponse
	21, // [21:25] is the sub-list for method output_type
	17, // [17:21] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_flex_proto_init() }
func file_flex_proto_init() {
	if File_flex_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flex_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkRequestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerNodeConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerNodeConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeeRemoteNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkRequest_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkResponse_Part); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget_Policies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget_S3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget_Azure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget_POSIX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flex_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*WorkRequest_Mock)(nil),
		(*WorkRequest_Sync)(nil),
	}
	file_flex_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*RemoteStorageTarget_S3_)(nil),
		(*RemoteStorageTarget_Posix)(nil),
		(*RemoteStorageTarget_Azure_)(nil),
		(*RemoteStorageTarget_Mock)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flex_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flex_proto_goTypes,
		DependencyIndexes: file_flex_proto_depIdxs,
		EnumInfos:         file_flex_proto_enumTypes,
		MessageInfos:      file_flex_proto_msgTypes,
	}.Build()
	File_flex_proto = out.File
	file_flex_proto_rawDesc = nil
	file_flex_proto_goTypes = nil
	file_flex_proto_depIdxs = nil
}
