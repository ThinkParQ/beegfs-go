package index

import (
	"fmt"
	"os"
	"os/exec"

	"github.com/spf13/cobra"
	"github.com/thinkparq/beegfs-go/ctl/internal/bflag"
	"github.com/thinkparq/beegfs-go/ctl/pkg/config"
)

const updateCmd = "index"

func newGenericUpdateCmd() *cobra.Command {
	var bflagSet *bflag.FlagSet

	var cmd = &cobra.Command{
		RunE: func(cmd *cobra.Command, args []string) error {
			if err := checkBeeGFSConfig(); err != nil {
				return err
			}
			return runPythonUpdateIndex(bflagSet)
		},
	}

	copyFlags := []bflag.FlagWrapper{
		bflag.Flag("fs-path", "F",
			"File system path for which index will be updated [default: UpdateEnv.conf]", "-F", ""),
		bflag.Flag("index-path", "I",
			"File system path for which index will be updated [default: UpdateEnv.conf]", "-I", ""),
		bflag.GlobalFlag(config.BeeGFSMountPointKey, "-M"),
		bflag.Flag("max-memory", "X", "Max memory usage (e.g. 8GB, 1G)", "-X", ""),
		bflag.GlobalFlag(config.NumWorkersKey, "-n"),
		bflag.Flag("summary", "s", "Create tree summary table along with other tables", "-s", false),
		bflag.Flag("only-summary", "S", "Create only tree summary table", "-S", false),
		bflag.Flag("xattrs", "x", "Pull xattrs from source", "-x", false),
		bflag.Flag("max-level", "z", "Max level to go down", "-z", 0),
		bflag.Flag("scan-dirs", "C", "Print the number of scanned directories", "-C", false),
		bflag.Flag("port", "p", "Port number to connect with client", "-p", 0),
		bflag.Flag("update", "U", "Run the update index", "-U", true),
		bflag.Flag("version", "v", "BeeGFS Hive Index Version", "-v", false),
		bflag.GlobalFlag(config.DebugKey, "-V=1"),
		bflag.Flag("no-metadata", "B", "Do not extract BeeGFS specific metadata", "-B", false),
	}

	bflagSet = bflag.NewFlagSet(copyFlags, cmd)
	cmd.Flags().MarkHidden("update")
	return cmd
}

func newUpdateCmd() *cobra.Command {
	s := newGenericUpdateCmd()
	s.Use = "update"
	s.Short = "Updates the index"
	s.Long = `Updates the index directory with ongoing operations

BeeGFS Hive Index uses modification events generated by BeeGFS metadata nodes
to update the index directory.The modification logs from BeeGFS have the file
path on which the operation is performed.The bee-update service takes advantage
of these events and modifies the Index directory for the specific file(s) or
directories only.This mechanism avoids scanning the filesystem entirely to
update the Index directory, ensuring that the index directory remains up-to-date
with filesystem modifications.

Event listener should be started on all the metadata nodes so that all filesystem
operations can be captured and replayed on the index directory by bee update.
`
	return s
}

func runPythonUpdateIndex(bflagSet *bflag.FlagSet) error {
	wrappedArgs := bflagSet.WrappedArgs()
	allArgs := make([]string, 0, len(wrappedArgs)+1)
	allArgs = append(allArgs, updateCmd)
	allArgs = append(allArgs, wrappedArgs...)
	cmd := exec.Command(beeBinary, allArgs...)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	err := cmd.Start()
	if err != nil {
		return fmt.Errorf("error starting command: %v", err)
	}
	err = cmd.Wait()
	if err != nil {
		return fmt.Errorf("error executing beeBinary: %v", err)
	}
	return nil
}
