package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	pb "github.com/thinkparq/protobuf/go/beewatch"
)

func TestDeserialize(t *testing.T) {

	// This follows the table driven test pattern described here:
	// https://dave.cheney.net/2019/05/07/prefer-table-driven-tests

	type test struct {
		name  string
		input []byte ``
		want  pb.Event
	}

	tests := []*test{
		{
			name: "With format version 1.0 unlink (remove) /hello",
			input: []byte{
				0x1, 0x0,
				0x0, 0x0,
				0x4b, 0x0, 0x0, 0x0,
				0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x9, 0x0, 0x0, 0x0,
				0xc, 0x0, 0x0, 0x0,
				0x30, 0x2d, 0x36, 0x34, 0x34, 0x43, 0x30, 0x39, 0x37, 0x33, 0x2d, 0x31, 0x0,
				0x4, 0x0, 0x0, 0x0,
				0x72, 0x6f, 0x6f, 0x74, 0x0,
				0x6, 0x0, 0x0, 0x0,
				0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
			want: pb.Event{

				EventData: &pb.Event_V1{
					V1: &pb.V1Event{
						DroppedSeq:     1,
						MissedSeq:      0,
						Type:           pb.V1Event_UNLINK,
						Path:           "/hello",
						EntryId:        "0-644C0973-1",
						ParentEntryId:  "root",
						TargetPath:     "",
						TargetParentId: "",
					},
				},
			},
		}, {
			name:  "With format version 1.0 move (rename) /bar/foo to /foo",
			input: []byte{0x1, 0x0, 0x0, 0x0, 0x5d, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x30, 0x2d, 0x36, 0x34, 0x34, 0x42, 0x46, 0x46, 0x31, 0x46, 0x2d, 0x31, 0x0, 0xc, 0x0, 0x0, 0x0, 0x30, 0x2d, 0x36, 0x34, 0x34, 0x43, 0x30, 0x30, 0x31, 0x42, 0x2d, 0x31, 0x0, 0x8, 0x0, 0x0, 0x0, 0x2f, 0x62, 0x61, 0x72, 0x2f, 0x66, 0x6f, 0x6f, 0x0, 0x4, 0x0, 0x0, 0x0, 0x2f, 0x66, 0x6f, 0x6f, 0x0, 0x4, 0x0, 0x0, 0x0, 0x72, 0x6f, 0x6f, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
			want: pb.Event{
				EventData: &pb.Event_V1{
					V1: &pb.V1Event{
						DroppedSeq:     1,
						MissedSeq:      0,
						Type:           pb.V1Event_RENAME,
						Path:           "/bar/foo",
						EntryId:        "0-644BFF1F-1",
						ParentEntryId:  "0-644C001B-1",
						TargetPath:     "/foo",
						TargetParentId: "root",
					},
				},
			},
		}, {
			name:  "With format version 1.0 setAttr on /world with no dropped events and one missed event",
			input: []byte{0x1, 0x0, 0x0, 0x0, 0x4b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x30, 0x2d, 0x36, 0x34, 0x34, 0x43, 0x31, 0x30, 0x31, 0x37, 0x2d, 0x31, 0x0, 0x4, 0x0, 0x0, 0x0, 0x72, 0x6f, 0x6f, 0x74, 0x0, 0x6, 0x0, 0x0, 0x0, 0x2f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
			want: pb.Event{
				EventData: &pb.Event_V1{
					V1: &pb.V1Event{
						DroppedSeq:     0,
						MissedSeq:      1,
						Type:           pb.V1Event_SETATTR,
						Path:           "/world",
						EntryId:        "0-644C1017-1",
						ParentEntryId:  "root",
						TargetPath:     "",
						TargetParentId: "",
					},
				},
			},
		}, {
			name:  "With format version 1.0 close /world after write after 3 dropped events",
			input: []byte{0x1, 0x0, 0x0, 0x0, 0x4b, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x30, 0x2d, 0x36, 0x34, 0x34, 0x43, 0x31, 0x30, 0x31, 0x37, 0x2d, 0x31, 0x0, 0x4, 0x0, 0x0, 0x0, 0x72, 0x6f, 0x6f, 0x74, 0x0, 0x6, 0x0, 0x0, 0x0, 0x2f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
			want: pb.Event{
				EventData: &pb.Event_V1{
					V1: &pb.V1Event{
						DroppedSeq:     3,
						MissedSeq:      0,
						Type:           pb.V1Event_CLOSE_WRITE,
						Path:           "/world",
						EntryId:        "0-644C1017-1",
						ParentEntryId:  "root",
						TargetPath:     "",
						TargetParentId: "",
					},
				},
			},
		}, {
			name: "With format version 2.0 create /world",
			input: []byte{
				0x2, 0x0, // 0
				0x4b, 0x0, 0x0, 0x0, // 2 - EventFlags
				0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // 6 - NumLinks
				0x5, 0x0, 0x0, 0x0, // 14 - Type
				0xc, 0x0, 0x0, 0x0, 0x30, 0x2d, 0x36, 0x34, 0x34, 0x43, 0x31, 0x30, 0x31, 0x37, 0x2d, 0x31, 0x0, 0x4, 0x0, 0x0, 0x0, 0x72, 0x6f, 0x6f, 0x74, 0x0, 0x6, 0x0, 0x0, 0x0, 0x2f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xE8, 0x03, 0x00, 0x00, 0xC8, 0xD6, 0xE6, 0xBE, 0xDB, 0x47, 0xFC, 0x17},
			want: pb.Event{
				EventFlags: 75,
				EventData: &pb.Event_V2{
					V2: &pb.V2Event{
						NumLinks:       1,
						Type:           pb.V2Event_CREATE,
						Path:           "/world",
						EntryId:        "0-644C1017-1",
						ParentEntryId:  "root",
						TargetPath:     "",
						TargetParentId: "",
						MsgUserId:      1000,
						Timestamp:      1728335366129637064,
					},
				},
			},
		}, {
			name: "With format version 2.0 open /hello for reading",
			input: []byte{
				0x2, 0x0, // 0 - Version
				0x4b, 0x0, 0x0, 0x0, // 2 - EventFlags
				0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // 6 - NumLinks
				0xd, 0x0, 0x0, 0x0, // 14 - Type
				0xc, 0x0, 0x0, 0x0,
				0x30, 0x2d, 0x36, 0x34, 0x34, 0x43, 0x30, 0x39, 0x37, 0x33, 0x2d, 0x31, 0x0,
				0x4, 0x0, 0x0, 0x0,
				0x72, 0x6f, 0x6f, 0x74, 0x0,
				0x6, 0x0, 0x0, 0x0,
				0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
			want: pb.Event{
				EventFlags: 75,
				EventData: &pb.Event_V2{
					V2: &pb.V2Event{
						NumLinks:       2,
						Type:           pb.V2Event_OPEN_READ,
						Path:           "/hello",
						EntryId:        "0-644C0973-1",
						ParentEntryId:  "root",
						TargetPath:     "",
						TargetParentId: "",
						MsgUserId:      0,
						Timestamp:      0,
					},
				},
			},
		}, {
			name: "With format version 2.0 last writer closed file",
			input: []byte{
				0x2, 0x0,
				0x46, 0x0, 0x0, 0x0,
				0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x10, 0x0, 0x0, 0x0,
				0xc, 0x0, 0x0, 0x0,
				0x30, 0x2d, 0x36, 0x34, 0x34, 0x43, 0x30, 0x39, 0x37, 0x33, 0x2d, 0x31, 0x0,
				0x4, 0x0, 0x0, 0x0,
				0x72, 0x6f, 0x6f, 0x74, 0x0,
				0x1, 0x0, 0x0, 0x0,
				0x68, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			},
			want: pb.Event{
				EventFlags: 70,
				EventData: &pb.Event_V2{
					V2: &pb.V2Event{
						NumLinks:       5,
						Type:           pb.V2Event_LAST_WRITER_CLOSED,
						Path:           "h",
						EntryId:        "0-644C0973-1",
						ParentEntryId:  "root",
						TargetPath:     "",
						TargetParentId: "",
						MsgUserId:      0,
						Timestamp:      0,
					},
				},
			},
		},
	}

	for _, tc := range tests {
		packet, err := deserializeEvent(tc.input, uint32(len(tc.input)))
		assert.NoError(t, err, tc.name)
		assert.Equal(t, &tc.want, packet, tc.name)
	}

	// Note in these tests the "want" field is not actually used and is left to make it easier to
	// interpret the raw bytes of the input. For all of these tests what we "want" is an error.
	testErrorConditions := []*test{
		{
			name: "Event formats greater than 2.0 are not supported",
			input: []byte{
				0x3, 0x0},
			want: pb.Event{},
		}, {
			name: "Error number of parsed bytes is less than the expected number of bytes",
			input: []byte{
				0x2, 0x0,
				0x46, 0x0, 0x0, 0x0,
				0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x10, 0x0, 0x0, 0x0,
				0xc, 0x0, 0x0, 0x0,
				0x30, 0x2d, 0x36, 0x34, 0x34, 0x43, 0x30, 0x39, 0x37, 0x33, 0x2d, 0x31, 0x0,
				0x4, 0x0, 0x0, 0x0,
				0x72, 0x6f, 0x6f, 0x74, 0x0,
				0x1, 0x0, 0x0, 0x0,
				0x68, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, // An extra byte!
			},
			want: pb.Event{
				// EventFlags: 70,
				// EventData: &pb.Event_V2{
				// 	V2: &pb.V2Event{
				// 		NumLinks:       5,
				// 		Type:           pb.V2Event_LAST_WRITER_CLOSED,
				// 		Path:           "h",
				// 		EntryId:        "0-644C0973-1",
				// 		ParentEntryId:  "root",
				// 		TargetPath:     "",
				// 		TargetParentId: "",
				// 		MsgUserId:      0,
				// 		Timestamp:      0,
				// 	},
				// },
			},
		},
	}

	for _, tc := range testErrorConditions {
		_, err := deserializeEvent(tc.input, uint32(len(tc.input)))
		assert.Error(t, err, tc.name)
	}

}
