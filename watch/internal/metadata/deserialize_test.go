package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	pb "github.com/thinkparq/bee-protos/beewatch"
)

func TestDeserialize(t *testing.T) {

	// This follows the table driven test pattern described here:
	// https://dave.cheney.net/2019/05/07/prefer-table-driven-tests

	type test struct {
		name  string
		input []byte
		want  pb.Event
	}

	tests := []*test{
		{
			name: "Unlink (remove) /hello",
			input: []byte{
				0x1, 0x0,
				0x0, 0x0,
				0x4b, 0x0, 0x0, 0x0,
				0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x9, 0x0, 0x0, 0x0,
				0xc, 0x0, 0x0, 0x0,
				0x30, 0x2d, 0x36, 0x34, 0x34, 0x43, 0x30, 0x39, 0x37, 0x33, 0x2d, 0x31, 0x0,
				0x4, 0x0, 0x0, 0x0,
				0x72, 0x6f, 0x6f, 0x74, 0x0,
				0x6, 0x0, 0x0, 0x0,
				0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
			want: pb.Event{
				FormatVersionMajor: 1,
				FormatVersionMinor: 0,
				Size:               75,
				DroppedSeq:         1,
				MissedSeq:          0,
				Type:               pb.Event_UNLINK,
				Path:               "/hello",
				EntryId:            "0-644C0973-1",
				ParentEntryId:      "root",
				TargetPath:         "",
				TargetParentId:     "",
			},
		}, {
			name:  "Move (rename) /bar/foo to /foo",
			input: []byte{0x1, 0x0, 0x0, 0x0, 0x5d, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x30, 0x2d, 0x36, 0x34, 0x34, 0x42, 0x46, 0x46, 0x31, 0x46, 0x2d, 0x31, 0x0, 0xc, 0x0, 0x0, 0x0, 0x30, 0x2d, 0x36, 0x34, 0x34, 0x43, 0x30, 0x30, 0x31, 0x42, 0x2d, 0x31, 0x0, 0x8, 0x0, 0x0, 0x0, 0x2f, 0x62, 0x61, 0x72, 0x2f, 0x66, 0x6f, 0x6f, 0x0, 0x4, 0x0, 0x0, 0x0, 0x2f, 0x66, 0x6f, 0x6f, 0x0, 0x4, 0x0, 0x0, 0x0, 0x72, 0x6f, 0x6f, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
			want: pb.Event{
				FormatVersionMajor: 1,
				FormatVersionMinor: 0,
				Size:               93,
				DroppedSeq:         1,
				MissedSeq:          0,
				Type:               pb.Event_RENAME,
				Path:               "/bar/foo",
				EntryId:            "0-644BFF1F-1",
				ParentEntryId:      "0-644C001B-1",
				TargetPath:         "/foo",
				TargetParentId:     "root",
			},
		}, {
			name:  "Create /world with a new major/minor version",
			input: []byte{0x2, 0x0, 0x1, 0x0, 0x4b, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x30, 0x2d, 0x36, 0x34, 0x34, 0x43, 0x31, 0x30, 0x31, 0x37, 0x2d, 0x31, 0x0, 0x4, 0x0, 0x0, 0x0, 0x72, 0x6f, 0x6f, 0x74, 0x0, 0x6, 0x0, 0x0, 0x0, 0x2f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
			want: pb.Event{
				FormatVersionMajor: 2,
				FormatVersionMinor: 1,
				Size:               75,
				DroppedSeq:         1,
				MissedSeq:          0,
				Type:               pb.Event_CREATE,
				Path:               "/world",
				EntryId:            "0-644C1017-1",
				ParentEntryId:      "root",
				TargetPath:         "",
				TargetParentId:     "",
			},
		}, {
			name:  "SetAttr on /world with no dropped events and one missed event",
			input: []byte{0x1, 0x0, 0x0, 0x0, 0x4b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x30, 0x2d, 0x36, 0x34, 0x34, 0x43, 0x31, 0x30, 0x31, 0x37, 0x2d, 0x31, 0x0, 0x4, 0x0, 0x0, 0x0, 0x72, 0x6f, 0x6f, 0x74, 0x0, 0x6, 0x0, 0x0, 0x0, 0x2f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
			want: pb.Event{
				FormatVersionMajor: 1,
				FormatVersionMinor: 0,
				Size:               75,
				DroppedSeq:         0,
				MissedSeq:          1,
				Type:               pb.Event_SETATTR,
				Path:               "/world",
				EntryId:            "0-644C1017-1",
				ParentEntryId:      "root",
				TargetPath:         "",
				TargetParentId:     "",
			},
		}, {
			name:  "Close /world after write after 3 missed events",
			input: []byte{0x1, 0x0, 0x0, 0x0, 0x4b, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x30, 0x2d, 0x36, 0x34, 0x34, 0x43, 0x31, 0x30, 0x31, 0x37, 0x2d, 0x31, 0x0, 0x4, 0x0, 0x0, 0x0, 0x72, 0x6f, 0x6f, 0x74, 0x0, 0x6, 0x0, 0x0, 0x0, 0x2f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
			want: pb.Event{
				FormatVersionMajor: 1,
				FormatVersionMinor: 0,
				Size:               75,
				DroppedSeq:         3,
				MissedSeq:          0,
				Type:               pb.Event_CLOSE_WRITE,
				Path:               "/world",
				EntryId:            "0-644C1017-1",
				ParentEntryId:      "root",
				TargetPath:         "",
				TargetParentId:     "",
			},
		},
	}

	for _, tc := range tests {
		packet, err := deserialize(tc.input, len(tc.input))
		assert.NoError(t, err)
		assert.Equal(t, &tc.want, packet)
	}

}
